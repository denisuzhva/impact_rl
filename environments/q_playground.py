import cv2
import numpy as np



class action_space:
    """
    Simple action space class. 
    """
    def __init__(self, n_actions) -> None:
        self.n_actions = n_actions

    def sample(self):
        return np.random.randint(0, self.n_actions)


class ImageEnvV1:
    """
    Environment generated by an picture.
    """
    def __init__(self, 
                 img_path='./ENV_PATTERNS/chessboard.png',
                 reward_weight=1.,
                 flatten=True):
        """
        Args:
            img_path:       Path to an image which encodes a target pattern
            reward_weight:  Reward multiplier
        """
        env_img = cv2.imread(img_path)
        env_img_g = cv2.cvtColor(env_img, cv2.COLOR_BGR2GRAY)

        self.reward_weight = reward_weight
        self.h, self.w = env_img_g.shape
        if flatten:
            env_img_ready = env_img_g.flatten()
        else:
            env_img_ready = env_img_g

        self.state_dim = env_img_ready.shape
        self.state_size = env_img_ready.size

        #self.reward_map_init = reward_weight * (2 * (env_img_ready / 255) - 1)
        self.reward_map = reward_weight * (2 * (env_img_ready / 255) - 1)
        #self.reward_map = np.copy(self.reward_map_init)

        self.target_state = (env_img_ready / 255).astype(np.float32)
        self.state = np.zeros_like(self.reward_map, dtype=np.float32)
        self.action_space = action_space(self.state_size)

    def step(self, action):
        new_state = self.state
        new_state[action] = 1.
        reward = self.reward_map[action]
        #self.reward_map[action] = -1 * self.reward_weight
        self.state = new_state
        if np.array_equal(self.state, self.target_state) or (self.state.sum() == self.target_state.sum()):
            is_done = True
        else:
            is_done = False
        return new_state, reward, is_done, None

    def reset(self):
        self.state = np.zeros_like(self.state)
        #self.reward_map = np.copy(self.reward_map_init)
        return self.state
    
    def get_img_state(self):
        return self.state.reshape((self.h, self.w))
        

